// This file is part of coursework 2 for COMP1212
// which follows the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// Written by Sam Wilson


/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are
 * documented in the book. In addition, the ALU
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

CHIP ALU {
    IN x[16], y[16], zx, nx, zy, ny, f, no;
    OUT out[16], zr, ng;

    PARTS:

    Mux16(x=x, y[0..15]=false, sel=zx, out=zdx);
    Not16(x=zdx, out=notx);
    Mux16(x=zdx, y=notx, sel=nx, out=ndx);
    Mux16(x=y, y[0..15]=false, sel=zy, out=zdy);
    Not16(x=zdy, out=noty);
    Mux16(x=zdy, y=noty, sel=ny, out=ndy);

    Add16(x=ndx, y=ndy, out=xplusy);
    And16(x=ndx, y=ndy, out=xandy);
    Mux16(x=xandy,  y=xplusy, sel=f, out=fxy);
    Not16(x=fxy, out=nfxy);
    Mux16(x=fxy, y=nfxy, sel=no, out=oo, out[0..7]=o1, out[8..15]=o2);


    Or8Way(x=o1, out=half1o);
    Or8Way(x=o1, out=half2o);
    Or(x=half1o, y=half2o, out=o);
    Not(x=o, out=zr);
    And16(x[0..15]=true, y=oo, out[15]=ng, out[0..14]=drop);
    Or16(x=oo, y[0..15]=false, out=out);

}
